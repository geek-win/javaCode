/*
 * 静态
 * 静态特点：
 * 1、随着类的加载而加载(Person类一进内存，静态数据已经开辟好了空间,一加载到内存中，静态数据就开辟好了空间，随着类的消失而消失)
 * 也就是静态会随着类的消失而消失，说明它的生命周期最长
 * 类中的成员变量（实例变量），对象的变量，和对象共同存在
 * 静态的成员变量是类变量，和类共存亡，类名可以调用
 * 2、优先于对象存在
 * 3、被所有对象共享
 * 4、可以直接被类名所调用
 * 静态使用的注意事项
 * 1、类名可以直接调用static修饰的变量和方法
 * 2、static修饰的方法中不可以引用非static变量和方法
 * 因为static修饰的方法在类加载的时候就出现了，但是非静态的变量方法在对象创建后才有，所以static直接调用非静态会有问题，static先于对象出现，即static先于非静态出现，所以static函数不能调用或者引用非静态变量和方法
 * 静态方法只能访问静态成员（方法和变量）
 * 非静态方法可以访问静态成员，也可以访问非静态
 * 3、静态方法中不可以出现this，因为this代表对象，但是此时对象还不存在
 * 静态优先于对象存在，所以静态方法中不可以出现this，super也不可以
 * 4、主函数是静态的
 *
 * 静态有利有弊
 * 好处：
 * 对对象的共享数据进行单独空间的存储，节省内存，没有必要每个对象中都存储一份
 * 可以直接被类名调用
 * 弊端：
 * 生命周期过长
 * 访问出现局限性（静态只能访问静态）
 * */
class Person
{
	String name;
	//中国人国籍一样
	//多个对象当中存在共同的数据（不是属性）
	//如果每个对象都建立一个country，就会比较耗费内存空间
	//所以可以将共同数据拿出来单独存储。需要的时候拿来用就好
	//加上static关键字即可，只能修饰成员（成员变量和成员函数）
	//被static修饰的成员不在堆内存中，而是在？？被对象共享。
	//当成员被static修饰后，就多了一种调用方式，除了可以被对象调用之外
	//还可以直接被类名调用，格式：类名.静态成员
	static String country = "CN";
	public void show()
	{
		System.out.println(name+"::"+country);
	}
}

class StaticDemo
{
	public static void main(String[] args)
	{
		Person p = new Person();
		p.name = "zhangsan";
		p.country = "US";
		p.show();

		System.out.println(Person.country);
	}
}
